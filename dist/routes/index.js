"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const patientRoutes_1 = __importDefault(require("./patientRoutes"));
const authRoutes_1 = __importDefault(require("./authRoutes"));
const authPatientRoutes_1 = __importDefault(require("./authPatientRoutes"));
const adminRoutes_1 = __importDefault(require("./adminRoutes"));
const contactRoutes_1 = __importDefault(require("./contactRoutes"));
const notificationRoutes_1 = __importDefault(require("./notificationRoutes"));
const authMiddleware_1 = require("../middleware/authMiddleware");
const AuthController_1 = __importDefault(require("../controllers/AuthController"));
const AppointmentRequestController_1 = __importDefault(require("../controllers/AppointmentRequestController"));
const AppointmentManagementController_1 = __importDefault(require("../controllers/AppointmentManagementController"));
const router = express_1.default.Router();
router.use('/auth', authRoutes_1.default);
router.use('/auth-patient', authPatientRoutes_1.default);
router.use('/patients', patientRoutes_1.default);
router.use('/admin', adminRoutes_1.default);
router.use('/contact', contactRoutes_1.default);
router.use('/notifications', notificationRoutes_1.default);
router.get('/me', authMiddleware_1.authenticateToken, AuthController_1.default.me.bind(AuthController_1.default));
router.post('/appointment-requests', authMiddleware_1.authenticateToken, authMiddleware_1.authenticatePatient, AppointmentRequestController_1.default.create.bind(AppointmentRequestController_1.default));
router.get('/appointment-requests', authMiddleware_1.authenticateToken, authMiddleware_1.authenticatePatient, AppointmentRequestController_1.default.listPatientAppointments.bind(AppointmentRequestController_1.default));
router.get('/appointments/history/:patientId', authMiddleware_1.authenticateToken, authMiddleware_1.authenticatePatient, AppointmentManagementController_1.default.getAppointmentHistory.bind(AppointmentManagementController_1.default));
router.get('/appointments/history', authMiddleware_1.authenticateToken, authMiddleware_1.authenticatePatient, AppointmentManagementController_1.default.getMyAppointmentHistory.bind(AppointmentManagementController_1.default));
exports.default = router;
